Start ListOfStatements Statement Declaration Assignment If While IO DeclarationPrefix DeclarationSufix Type Expression SimpleType Sign Condition Read Write StatementP OptionalElse Operand Operator Relation Identifier IdentifierSufix ExpressionP ExpressionRightCond
SimpleIdentifier Constant != == >= <= > < { } ( ) [ ] : ; ` ' , $<< $>> var fi fie loop let in seq = vector number decimal str car + - * / %
Start
Start->ListOfStatements
ListOfStatements->Statement StatementP
StatementP->Statement StatementP|ε
Statement->Declaration|Assignment|If|While|IO
Declaration->DeclarationPrefix DeclarationSufix
DeclarationPrefix->var Identifier : Type
DeclarationSufix->;|= Expression ;
Assignment->Identifier = Expression ;
SimpleType->number|decimal|str|car
Type->SimpleType|vector < SimpleType >
If->fi ( Condition { ListOfStatements } OptionalElse
OptionalElse->fie { ListOfStatements }|ε
While->loop ( Condition { ListOfStatements }
Read->$<< Identifier ;
Write->$>> Expression ;
IO->Read|Write
Condition->Expression Relation ExpressionRightCond
ExpressionRightCond->Expression )
Relation-><|>|<=|>=|==|!=
Operator->+|-|*|/|%
Expression->Operand ExpressionP
ExpressionP->Operator Expression|ε
Operand->Identifier|Constant
Sign->+|-
Identifier->SimpleIdentifier IdentifierSufix
IdentifierSufix->[ Expression ]|ε